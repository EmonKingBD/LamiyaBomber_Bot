Lamiya Bomber Bot by @EmonDhali

Fully ready for Railway deployment with all features (points system, ads, referral, etc.)

import logging from aiogram import Bot, Dispatcher, executor, types from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton from aiogram.contrib.fsm_storage.memory import MemoryStorage import asyncio import json import datetime

API_TOKEN = '7347748386:AAGHpxqVnlkAmqKCFd-KZbyljpOMzA40soE' CHANNEL_ID = '@TermuxHubBD' ADMIN_ID = 8148383622

logging.basicConfig(level=logging.INFO) bot = Bot(token=API_TOKEN) dp = Dispatcher(bot, storage=MemoryStorage())

User data storage

try: with open("users.json", "r") as f: USERS = json.load(f) except: USERS = {}

HTML ad link

AD_URL = "https://www.profitableratecpm.com/ux7k3n129?key=9f8fbb19c45e74b93fc55ddbd45c0318"

--- Helper Functions ---

def save_users(): with open("users.json", "w") as f: json.dump(USERS, f)

def get_points(uid): return USERS.get(str(uid), {}).get("points", 0)

def add_points(uid, amount): uid = str(uid) if uid not in USERS: USERS[uid] = {"points": 0, "last_claim": ""} USERS[uid]["points"] += amount save_users()

def set_last_claim(uid, date): uid = str(uid) USERS[uid]["last_claim"] = date save_users()

def can_claim_daily(uid): uid = str(uid) today = str(datetime.date.today()) return USERS.get(uid, {}).get("last_claim") != today

--- Keyboards ---

def main_buttons(): kb = InlineKeyboardMarkup(row_width=2) kb.add( InlineKeyboardButton("ЁЯТе SMS ржмрзЛржорж┐ржВ ржХрж░рзБржи", callback_data="bomber"), InlineKeyboardButton("ЁЯОБ ржкржпрж╝рзЗржирзНржЯ ржЖрзЯ ржХрж░рзБржи", callback_data="earn"), InlineKeyboardButton("ЁЯУв ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржЪрзНржпрж╛ржирзЗрж▓", url="https://t.me/TermuxHubBD"), InlineKeyboardButton("тД╣я╕П ржмржЯ рждржерзНржп", callback_data="info") ) return kb

--- Commands & Handlers ---

@dp.message_handler(commands=['start']) async def start_handler(msg: types.Message): user = msg.from_user uid = str(user.id)

if uid not in USERS:
    USERS[uid] = {"points": 50, "last_claim": ""}
    save_users()
    await bot.send_message(ADMIN_ID, f"ЁЯСд New user joined: {user.full_name} (@{user.username})")

await msg.answer(
    f"ЁЯФ╣ ЁЯТе <b>Lamiya Bomber Bot</b> ЁЯТе\n\n"
    f"ЁЯУ▓ SMS ржмрзЛржорж┐ржВ ржХрж░рзБржи Points ржжрж┐ржпрж╝рзЗ!\n"
    f"ЁЯОБ Start ржХрж░рж▓рзЗржЗ ржлрзНрж░рж┐ рзлрзж ржкржпрж╝рзЗржирзНржЯ!\n"
    f"ЁЯУЕ ржкрзНрж░рждрж┐ржжрж┐ржи рж▓ржЧржЗржи = рззрзл ржкржпрж╝рзЗржирзНржЯ\n"
    f"ЁЯУ║ Ad ржжрзЗржЦрж▓рзЗржЗ = рзл ржкржпрж╝рзЗржирзНржЯ\n"
    f"ЁЯУд рззрзж ржкржпрж╝рзЗржирзНржЯ = рззржЯрж┐ SMS\n\n"
    f"ЁЯУМ рж░рзЗржлрж╛рж░ ржХрж░рж▓рзЗ рзирзж ржкржпрж╝рзЗржирзНржЯ ржмрзЛржирж╛рж╕ ржкрж╛ржмрзЗ!\n"
    f"ЁЯЖФ UID: <code>{uid}</code>",
    reply_markup=main_buttons(),
    parse_mode="html")

@dp.callback_query_handler(lambda c: c.data == 'info') async def bot_info(call: types.CallbackQuery): await call.message.edit_text( "ЁЯФ╣ <b>Lamiya Bomber Bot</b>\n\n" "ЁЯФз Bot Maker: @EmonDhali\n" "ЁЯУв ржЪрзНржпрж╛ржирзЗрж▓: @TermuxHubBD\n" "ЁЯМН рж╕ржХрж▓ ржжрзЗрж╢рзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ржн!\n" "ЁЯОБ ржкржпрж╝рзЗржирзНржЯ рж╕рж┐рж╕рзНржЯрзЗржо + рж░рзЗржлрж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржо + ржПржб ржмрзЛржирж╛рж╕\n\n" "тЬЕ ржмржЯ рж╕ржм рж╕ржоржпрж╝ рзирзк/рзн ржЪрж╛рж▓рзБ ржерж╛ржХржмрзЗ!", parse_mode="html", reply_markup=main_buttons())

@dp.callback_query_handler(lambda c: c.data == 'earn') async def earn_points(call: types.CallbackQuery): uid = str(call.from_user.id) today = str(datetime.date.today())

# Daily bonus
if can_claim_daily(uid):
    add_points(uid, 15)
    set_last_claim(uid, today)
    await call.message.answer("ЁЯОБ ржЖржЬржХрзЗрж░ Daily Bonus: тЬЕ рззрзл ржкржпрж╝рзЗржирзНржЯ ржкрзЗржпрж╝рзЗржЫрзЛ!")
else:
    await call.message.answer("ЁЯУЕ ржЖржЬржХрзЗрж░ Daily Bonus ржЗрждрж┐ржоржзрзНржпрзЗ ржирж┐ржпрж╝рзЗржЫрзЛ!")

# Ad watching bonus
ad_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("тЦ╢я╕П ржПржЦржиржЗ Ad ржжрзЗржЦрзБржи", url=AD_URL))
await call.message.answer("ЁЯУ║ Ad ржжрзЗржЦрзЗ рзл ржкржпрж╝рзЗржирзНржЯ ржирж┐рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржирж┐ржЪрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:\nAd рж╢рзЗрж╖ рж╣рж▓рзЗ ржкржпрж╝рзЗржирзНржЯ ржкрж╛ржмрзЗ!", reply_markup=ad_kb)

@dp.callback_query_handler(lambda c: c.data == 'bomber') async def bomber_feature(call: types.CallbackQuery): uid = str(call.from_user.id) points = get_points(uid)

if points < 10:
    await call.message.answer("тЭМ SMS ржмрзЛржорж┐ржВ ржПрж░ ржЬржирзНржп ржХржоржкржХрзНрж╖рзЗ рззрзж ржкржпрж╝рзЗржирзНржЯ рж▓рж╛ржЧржмрзЗ!")
else:
    add_points(uid, -10)
    await call.message.answer("тЬЕ SMS ржмрзЛржорж┐ржВ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ! [Demo SMS sent]")

--- Main ---

if name == 'main': executor.start_polling(dp, skip_updates=True)

